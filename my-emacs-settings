;; AUTO-GENERATED SETTINGS (After installing auctex)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(meghanada lsp-javacomp web-mode web-beautify rjsx-mode prettier-js ng2-mode neotree lsp-mode leuven-theme format-all emmet-mode elpy company-web company-quickhelp autopair auctex all-the-icons ac-js2)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )


;; ADDING MELPA

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
;; and `package-pinned-packages`. Most users will not need or want to do this.
;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)


;; USER-DEFINED SETTINGS

;; Disable toolbar
(tool-bar-mode -1)

;; display line number
(global-display-line-numbers-mode)

;; turn on highlight matching brackets when cursor is on one
(show-paren-mode 1)

;; highlight brackets
(setq show-paren-style 'parenthesis)

;; without backup files
(setq make-backup-files nil)

;; autopair
(require 'autopair)
(autopair-global-mode) ;; to enable in all buffers

;; leuven theme
(load-theme 'leuven t)

;; Neotree
(add-to-list 'load-path "C:\\Users\\Linh\\AppData\\Roaming\\.emacs.d\\elpa\\neotree-20200324.1946\\neotree")
(require 'neotree)
(global-set-key [f8] 'neotree-toggle)
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
;; Neotree resizing
(setq neo-window-fixed-size nil)

;; All the icon
(require 'all-the-icons)

;; All the icon for dired mode
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

;; Company
(add-hook 'after-init-hook 'global-company-mode)
(setq company-idle-delay 0)

;; company-quickhelp
(company-quickhelp-mode)

;; company-web
(require 'company) ;; load company mode
(require 'company-web-html) ;; load company mode html backend
;; and/or
;;(require 'company-web-jade) ;; load company mode jade backend
;;(require 'company-web-slim) ;; load company mode slim backend

;; you may key bind, for example for web-mode:
;; (define-key web-mode-map (kbd "C-'") 'company-web-html)

;; ac-js2
(add-to-list 'company-backends 'ac-js2-company)

;; Emmet
(add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
(add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
(setq emmet-expand-jsx-className? t) ;; default nil
(setq emmet-self-closing-tag-style " /") ;; default "/"
;; C-M-q Reindent all the lines within one parenthetical grouping(indent-sexp).
;; C-M-\ Reindent all lines in the region (indent-region).

;; Web-mode
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))

;; Prettier-js
(require 'prettier-js)
(add-hook 'web-mode-hook 'prettier-js-mode)
;; In addition, you must install diffutils

;; js2-mode 
;; Adding as major mode
;; (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
;; Use Emacs 27 and want to write JSX?  Then use js2-minor-mode
(add-hook 'js-mode-hook 'js2-minor-mode)

;; rjsx-mode
(add-to-list 'auto-mode-alist '("components\\/.*\\.js\\'" . rjsx-mode))

;; lsp-mode
(require 'lsp-mode)
(add-hook 'prog-mode-hook #'lsp)

;; format-all
;; Just do M-x format-all-buffer and it will try its best to do the right thing. To auto-format code on save, use the minor mode format-all-mode

;; web-beautify
(require 'web-beautify) ;; Not necessary if using ELPA package
(eval-after-load 'js2-mode
  '(define-key js2-mode-map (kbd "C-c b") 'web-beautify-js))
;; Or if you're using 'js-mode' (a.k.a 'javascript-mode')
(eval-after-load 'js
  '(define-key js-mode-map (kbd "C-c b") 'web-beautify-js))

(eval-after-load 'json-mode
  '(define-key json-mode-map (kbd "C-c b") 'web-beautify-js))

(eval-after-load 'sgml-mode
  '(define-key html-mode-map (kbd "C-c b") 'web-beautify-html))

(eval-after-load 'web-mode
  '(define-key web-mode-map (kbd "C-c b") 'web-beautify-html))

(eval-after-load 'css-mode
  '(define-key css-mode-map (kbd "C-c b") 'web-beautify-css))

;; Org-mode
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
;; Start-up with soft-wrap enabled
(setq org-startup-truncated nil)
;; Setting up capture
;; (setq org-default-notes-file (concat org-directory "/notes.org"))

;; Angular ng2-mode
(with-eval-after-load 'typescript-mode (add-hook 'typescript-mode-hook #'lsp))

;; Enable Elpy for Python development
;;(package-initialize)
(elpy-enable)

;; Meghanada Java
(require 'meghanada)
(add-hook 'java-mode-hook
          (lambda ()
            ;; meghanada-mode on
            (meghanada-mode t)
            (flycheck-mode +1)
            (setq c-basic-offset 2)
            ;; use code format
            (add-hook 'before-save-hook 'meghanada-code-beautify-before-save)))
(cond
   ((eq system-type 'windows-nt)
    (setq meghanada-java-path (expand-file-name "bin/java.exe" (getenv "JAVA_HOME")))
    (setq meghanada-maven-path "mvn.cmd"))
   (t
    (setq meghanada-java-path "java")
    (setq meghanada-maven-path "mvn")))


